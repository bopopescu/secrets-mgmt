xdcr.rebalanceXDCR.Rebalance:
    #Rebalance Out
    async_rebalance_out,items=100000,rdirection=bidirection,ctopology=chain,update=C1-C2,delete=C1-C2,rebalance=C2,num_rebalance=1,GROUP=P1
    async_rebalance_out,items=100000,rdirection=bidirection,ctopology=chain,update=C1-C2,delete=C1-C2,rebalance=C1-C2,num_rebalance=1,GROUP=P1

    #Rebalance Out [datasets with expired items.]
    async_rebalance_out,items=10000,rdirection=bidirection,ctopology=chain,expires=300,update=C1-C2,delete=C1-C2,rebalance=C1,num_rebalance=1,GROUP=P0;xmem
    #async_rebalance_out,items=100000,rdirection=bidirection,ctopology=chain,expires=300,update=C1-C2,delete=C1-C2,rebalance=C2,num_rebalance=1,GROUP=P1
    #async_rebalance_out,items=100000,rdirection=bidirection,ctopology=chain,expires=300,update=C1-C2,delete=C1-C2,rebalance=C1-C2,num_rebalance=1,GROUP=P1
    #MB-9497
    async_rebalance_out,items=100000,rdirection=bidirection,async_load=True,ctopology=chain,expires=300,rebalance=C1,num_rebalance=2,max_verify=10000,GROUP=P1
    async_rebalance_out,items=100000,rdirection=bidirection,async_load=True,ctopology=chain,expires=300,rebalance=C1,num_rebalance=2,replication_type=xmem,max_verify=10000,GROUP=P1

    #Rebalance Out Master
    async_rebalance_out_master,items=10000,rdirection=bidirection,ctopology=chain,update=C1-C2,delete=C1-C2,rebalance=C1,GROUP=P0;xmem
    async_rebalance_out_master,items=100000,rdirection=bidirection,ctopology=chain,update=C1-C2,delete=C1-C2,rebalance=C2,GROUP=P1
    async_rebalance_out_master,items=100000,rdirection=bidirection,ctopology=chain,update=C1-C2,delete=C1-C2,rebalance=C1-C2,GROUP=P1

    #Swap rebalance
    swap_rebalance,items=100000,rdirection=bidirection,ctopology=chain,update=C1-C2,delete=C1-C2,rebalance=C2,GROUP=P0;xmem
    swap_rebalance,items=100000,rdirection=bidirection,ctopology=chain,update=C1-C2,delete=C1-C2,rebalance=C2-C1,GROUP=P1
    swap_rebalance_out_master,items=100000,rdirection=bidirection,ctopology=chain,update=C1-C2,delete=C1-C2,rebalance=C2,GROUP=P1
    swap_rebalance_out_master,items=100000,rdirection=bidirection,ctopology=chain,update=C1-C2,delete=C1-C2,rebalance=C1-C2,GROUP=P1

    #Compaction and view queries
    swap_rebalance_replication_with_view_queries_and_ops,items=10000,update=C1-C2,delete=C1-C2,rdirection=bidirection,rebalance=C1,poll_timeout=300,GROUP=P0;xmem
    swap_rebalance_replication_with_ddoc_compaction,items=100000,rdirection=bidirection,is_dev_ddoc=false,rebalance=C2,GROUP=P1,poll_timeout=900
    swap_rebalance_replication_with_ddoc_compaction,items=100000,rdirection=bidirection,rebalance=C2,GROUP=P1,poll_timeout=900

    #Compaction and view queries - Uni-directional
    swap_rebalance_replication_with_view_queries_and_ops,items=10000,update=C1,delete=C1,rdirection=unidirection,rebalance=C2,poll_timeout=180,GROUP=P0;xmem
    swap_rebalance_replication_with_view_queries_and_ops,items=100000,update=C1,delete=C1,rdirection=unidirection,is_dev_ddoc=false,rebalance=C1,timeout=240,poll_timeout=600,GROUP=P1
    #swap_rebalance_replication_with_ddoc_compaction,items=100000,is_dev_ddoc=false,rdirection=unidirection,rebalance=C1,GROUP=P1,poll_timeout=900
    swap_rebalance_replication_with_ddoc_compaction,items=100000,rdirection=unidirection,rebalance=C2,GROUP=P1,poll_timeout=900

    # async failover with rebalance in and out during data load
    failover_and_rebalance_in_out,items=50000,failover=C1,num_failover=1,rebalance=C1,num_rebalance=1,GROUP=P1

    # same as above test but data loss scenarios, so skip data validation
    failover_and_rebalance_in_out,items=50000,failover=C1,num_failover=1,rebalance=C1,num_rebalance=1,replicas=1,skip_key_validation=True,GROUP=P1
    failover_and_rebalance_in_out,items=50000,failover=C1,num_failover=1,rebalance=C1,num_rebalance=1,replicas=0,skip_key_validation=True,GROUP=P1
    failover_and_rebalance_in_out,items=50000,failover=C1,num_failover=1,rebalance=C1,num_rebalance=1,replicas=2,skip_key_validation=True,GROUP=P1